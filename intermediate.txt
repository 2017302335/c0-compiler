@var int i
@var int j
@var int k
@var char x
@var char y
@var char z
@array int[] array 100
@func foo1
@para m
@para n1
@var int a1
@var int a2
@var int i
@var int n
#0 = 98
#1 = array ARGET #0
#2 = 1 MUL #1
#3 = 98 ADD #2
a1 = #3
#4 = 1 MUL n1
#5 = 0 ADD #4
n = #5
@printf string N/M: 
i = 0
#6 = 1 MUL m
#7 = 0 ADD #6
#7 = #7 EQ 0
@bz #7 foo1_L_0_else_begin
#8 = 1 MUL n
#9 = 0 ADD #8
#9 = #9 EQ 0
@bz #9 foo1_L_2_else_begin
foo1_L_4_while_begin :
#10 = 1 MUL i
#11 = 0 ADD #10
#12 = 1 MUL j
#13 = 0 ADD #12
#11 = #11 LT #13
@bz #11 foo1_L_5_while_over
#14 = 1 MUL i
#15 = 0 ADD #14
#15 = #15 ADD 1
i = #15
@scanf a1
@scanf a2
#16 = 1 MUL a1
#17 = 0 ADD #16
#18 = 1 MUL a2
#19 = 0 ADD #18
#17 = #17 GT #19
@bz #17 foo1_L_6_else_begin
@printf string Test 01
foo1_L_8_while_begin :
#20 = 1 MUL a1
#21 = 0 ADD #20
#22 = 1 MUL a1
#23 = 0 ADD #22
#24 = 1 MUL a2
#23 = #23 SUB #24
#21 = #21 GT #23
@bz #21 foo1_L_9_while_over
#25 = 1 MUL a1
#26 = 0 ADD #25
#26 = #26 SUB -3
a1 = #26
#27 = 1 MUL a2
#28 = 0 ADD #27
#28 = #28 SUB 1
a2 = #28
@printf string M = 
#29 = 1 MUL a1
#30 = 0 ADD #29
@printf int #30
@j foo1_L_8_while_begin
foo1_L_9_while_over :
@j foo1_L_7_else_over
foo1_L_6_else_begin :
#31 = 1 MUL m
#32 = 0 ADD #31
n = #32
foo1_L_7_else_over :
@j foo1_L_4_while_begin
foo1_L_5_while_over :
@j foo1_L_3_else_over
foo1_L_2_else_begin :
foo1_L_3_else_over :
@j foo1_L_1_else_over
foo1_L_0_else_begin :
foo1_L_1_else_over :
#33 = 1 MUL m
#34 = 0 ADD #33
#34 = #34 EQ 0
@bz #34 foo1_L_10_else_begin
#35 = 1 MUL n
#36 = 0 ADD #35
#36 = #36 EQ 0
@bz #36 foo1_L_12_else_begin
#37 = 1 MUL a1
#38 = 0 ADD #37
#39 = 1 MUL a2
#38 = #38 SUB #39
@ret #38
@j foo1_L_13_else_over
foo1_L_12_else_begin :
foo1_L_13_else_over :
@j foo1_L_11_else_over
foo1_L_10_else_begin :
foo1_L_11_else_over :
#40 = 1 MUL m
#41 = 0 ADD #40
#42 = 1 MUL n
#43 = 0 ADD #42
#41 = #41 GT #43
@bz #41 foo1_L_14_else_begin
@printf string Test 01
foo1_L_16_while_begin :
#44 = 1 MUL m
#45 = 0 ADD #44
#46 = 1 MUL m
#47 = 0 ADD #46
#48 = 1 MUL n
#47 = #47 SUB #48
#45 = #45 GT #47
@bz #45 foo1_L_17_while_over
#49 = 1 MUL m
#50 = 0 ADD #49
#50 = #50 SUB 3
m = #50
#51 = 1 MUL n
#52 = 0 ADD #51
#52 = #52 SUB 1
n = #52
@printf string M = 
#53 = 1 MUL m
#54 = 0 ADD #53
@printf int #54
@j foo1_L_16_while_begin
foo1_L_17_while_over :
@j foo1_L_15_else_over
foo1_L_14_else_begin :
#55 = 1 MUL m
#56 = 0 ADD #55
n = #56
foo1_L_15_else_over :
#57 = 1 MUL i
#57 = #57 MUL -2
#58 = 0 ADD #57
i = #58
#59 = 1 MUL n
#60 = 0 ADD #59
#61 = 1 MUL m
#60 = #60 SUB #61
@ret #60
@ret 0
@func foo2
@para m
@para n
@ret -2
@ret 0
@func no_meanings
@push 50
@push 97
@call foo2
@push 50
@push 97
@call foo2
@push 50
@push 97
@call foo2
@push 50
@push 97
@call foo2
@push 50
@push 97
@call foo2
@ret
@func print_all
@printf char 50
@printf char 97
@printf int 1111111111
@printf int 0
@printf int -123
#0 = 1 MUL i
#1 = 0 ADD #0
@printf int #1
#2 = 1 MUL j
#3 = 0 ADD #2
@printf int #3
#4 = 1 MUL k
#5 = 0 ADD #4
@printf int #5
#6 = 1 MUL x
#7 = 0 ADD #6
@printf char #7
#8 = 1 MUL y
#9 = 0 ADD #8
@printf char #9
@ret
@ret
@func init_all_char
i = 43
j = 42
k = 97
x = 48
y = 95
@ret 666
@ret 0
@func print_null
@printf string 
@printf string '!#$%$%^&%^){}{|<'
@printf string              
@ret 0
@ret 0
@func foo3
@para m
@para count
#0 = 1 MUL m
#1 = 0 ADD #0
#1 = #1 LT -13
@bz #1 foo3_L_0_else_begin
@printf string FIFTEEN!
@ret 1
@j foo3_L_1_else_over
foo3_L_0_else_begin :
#2 = 1 MUL m
#3 = 0 ADD #2
#3 = #3 LT -10
@bz #3 foo3_L_2_else_begin
@printf string TEN!
@ret 0
@j foo3_L_3_else_over
foo3_L_2_else_begin :
foo3_L_3_else_over :
foo3_L_1_else_over :
@call no_meanings
#4 = 1 MUL m
#4 = #4 DIV 2
#5 = 0 ADD #4
#5 = #5 SUB 10
@push #5
#6 = 1 MUL count
#7 = 0 ADD #6
#7 = #7 ADD 1
@push #7
@call foo3
@get #8
#9 = 1 MUL #8
#10 = 0 ADD #9
#10 = #10 GT 0
@bz #10 foo3_L_4_else_begin
@ret 1
@j foo3_L_5_else_over
foo3_L_4_else_begin :
@ret 0
foo3_L_5_else_over :
@ret 0
@func test_expression
@array int[] a_rray_ 100
i = 1
#0 = 5
@call print_null
@get #1
#2 = 1 MUL #1
#3 = 100 ADD #2
a_rray_ = #0 ARSET #3
@printf string HHHH
#4 = 5
#5 = a_rray_ ARGET #4
#6 = 1 MUL #5
#6 = #6 DIV 42
#7 = 5 ADD #6
#8 = 5
#9 = a_rray_ ARGET #8
#10 = 1 MUL #9
#11 = 5 ADD #10
@push #11
@push 49
@call foo1
@get #12
#13 = 1 MUL #12
#7 = #7 ADD #13
@call print_null
@get #14
#15 = 1 MUL #14
#7 = #7 ADD #15
@printf int #7
@ret 48
@ret 0
@func foo4
@var int i
@var int j
@var int k
@var int a
a = 8
a = 195
#0 = 1 MUL a
#1 = 0 ADD #0
i = #1
#2 = 1 MUL a
#3 = 0 ADD #2
#3 = #3 ADD 1
j = #3
#4 = 1 MUL a
#4 = #4 MUL a
#5 = 0 ADD #4
k = #5
#6 = 1 MUL i
#7 = 0 ADD #6
#8 = 1 MUL j
#8 = #8 MUL k
#7 = #7 ADD #8
@ret #7
@ret 0
@func scanf_all
@printf string Scanf all: 
@scanf i
@scanf j
@scanf k
@scanf x
@scanf y
@ret
@func test_switch
@para number
#0 = 1 MUL number
#1 = 0 ADD #0
@j test_switch_L_0_switch_branch
test_switch_L_2_case :
@printf string Oh noooooo!
@j test_switch_L_1_switch_over
test_switch_L_3_case :
@printf string Oh yeah!
@j test_switch_L_1_switch_over
test_switch_L_4_case :
@j test_switch_L_1_switch_over
test_switch_L_5_default :
@printf string dark deep Fantasy!
test_switch_L_0_switch_branch :
@be #1 0 test_switch_L_3_case
@be #1 1 test_switch_L_4_case
@be #1 48 test_switch_L_2_case
@j test_switch_L_5_default
test_switch_L_1_switch_over :
@ret
@func foo5
@para m
@para count
#0 = 1 MUL m
#1 = 0 ADD #0
#1 = #1 GT 0
@bz #1 foo5_L_0_else_begin
#2 = 1 MUL m
#3 = 0 ADD #2
#3 = #3 SUB 1
@push #3
#4 = 1 MUL count
#5 = 0 ADD #4
#5 = #5 ADD 1
@push #5
@call foo5
@get #6
#7 = 1 MUL #6
#8 = 0 ADD #7
@ret #8
@j foo5_L_1_else_over
foo5_L_0_else_begin :
#9 = 1 MUL count
#10 = 0 ADD #9
@ret #10
foo5_L_1_else_over :
@ret 0
@func fibonacci
@var int a
@var int b
@var int sum
@var int n
@var int i
a = 1
#0 = 1 MUL a
#1 = 0 ADD #0
b = #1
@scanf n
#2 = 1 MUL a
#3 = 0 ADD #2
@printf int #3
#4 = 1 MUL b
#5 = 0 ADD #4
@printf int #5
i = 3
fibonacci_L_0_while_begin :
#6 = 1 MUL i
#7 = 0 ADD #6
#8 = 1 MUL n
#9 = 0 ADD #8
#7 = #7 LE #9
@bz #7 fibonacci_L_1_while_over
#10 = 1 MUL a
#11 = 0 ADD #10
#12 = 1 MUL b
#11 = #11 ADD #12
sum = #11
#13 = 1 MUL a
#14 = 0 ADD #13
b = #14
#15 = 1 MUL sum
#16 = 0 ADD #15
a = #16
#17 = 1 MUL sum
#18 = 0 ADD #17
@printf int #18
#19 = 1 MUL i
#20 = 0 ADD #19
#20 = #20 ADD 1
i = #20
@j fibonacci_L_0_while_begin
fibonacci_L_1_while_over :
@ret 0
@ret 0
@func sort
@array int[] a 10
@var int i
@var int j
@var int temp
@printf string Please input ten numbers:
i = 0
sort_L_0_while_begin :
#0 = 1 MUL i
#1 = 0 ADD #0
#1 = #1 LT 10
@bz #1 sort_L_1_while_over
@scanf temp
#2 = 1 MUL i
#3 = 0 ADD #2
#4 = 1 MUL temp
#5 = 0 ADD #4
a = #3 ARSET #5
#6 = 1 MUL i
#7 = 0 ADD #6
#7 = #7 ADD 1
i = #7
@j sort_L_0_while_begin
sort_L_1_while_over :
i = 0
sort_L_2_while_begin :
#8 = 1 MUL i
#9 = 0 ADD #8
#9 = #9 LT 9
@bz #9 sort_L_3_while_over
j = 0
sort_L_4_while_begin :
#10 = 1 MUL j
#11 = 0 ADD #10
#12 = 1 MUL i
#13 = 9 SUB #12
#11 = #11 LT #13
@bz #11 sort_L_5_while_over
#14 = 1 MUL j
#15 = 0 ADD #14
#16 = a ARGET #15
#17 = 1 MUL #16
#18 = 0 ADD #17
#19 = 1 MUL j
#20 = 0 ADD #19
#20 = #20 ADD 1
#21 = a ARGET #20
#22 = 1 MUL #21
#23 = 0 ADD #22
#18 = #18 GT #23
@bz #18 sort_L_6_else_begin
#24 = 1 MUL j
#25 = 0 ADD #24
#26 = a ARGET #25
#27 = 1 MUL #26
#28 = 0 ADD #27
temp = #28
#29 = 1 MUL j
#30 = 0 ADD #29
#31 = 1 MUL j
#32 = 0 ADD #31
#32 = #32 ADD 1
#33 = a ARGET #32
#34 = 1 MUL #33
#35 = 0 ADD #34
a = #30 ARSET #35
#36 = 1 MUL j
#37 = 0 ADD #36
#37 = #37 ADD 1
#38 = 1 MUL temp
#39 = 0 ADD #38
a = #37 ARSET #39
@j sort_L_7_else_over
sort_L_6_else_begin :
sort_L_7_else_over :
#40 = 1 MUL j
#41 = 0 ADD #40
#41 = #41 ADD 1
j = #41
@j sort_L_4_while_begin
sort_L_5_while_over :
#42 = 1 MUL i
#43 = 0 ADD #42
#43 = #43 ADD 1
i = #43
@j sort_L_2_while_begin
sort_L_3_while_over :
i = 0
sort_L_8_while_begin :
#44 = 1 MUL i
#45 = 0 ADD #44
#45 = #45 LT 10
@bz #45 sort_L_9_while_over
#46 = 1 MUL i
#47 = 0 ADD #46
#47 = #47 ADD 1
i = #47
#48 = 1 MUL i
#49 = 0 ADD #48
#49 = #49 SUB 1
#50 = a ARGET #49
#51 = 1 MUL #50
#52 = 0 ADD #51
@printf int #52
@j sort_L_8_while_begin
sort_L_9_while_over :
@ret 53
@ret 0
@func main
@var int times
@var int i
@scanf j
@push 0
@push 48
@call foo1
@get #0
#1 = 1 MUL #0
#2 = 48 ADD #1
@printf int #2
@call test_expression
@call print_null
@call no_meanings
@call init_all_char
i = 49
#3 = 1 MUL i
#4 = 0 ADD #3
@printf int #4
@j main_L_0_else_begin
@ret
@ret
@j main_L_1_else_over
main_L_0_else_begin :
main_L_1_else_over :
@printf string 3333 2333:
@call foo4
@get #5
#6 = 1 MUL #5
#7 = 0 ADD #6
@printf int #7
@call foo4
@get #8
#9 = 1 MUL #8
#10 = 0 ADD #9
@push #10
@push 0
@call foo3
@get #11
#12 = 1 MUL #11
#13 = 0 ADD #12
@printf int #13
@call foo4
@get #14
#15 = 1 MUL #14
#16 = 0 ADD #15
@push #16
@push 0
@call foo3
@get #17
#18 = 1 MUL #17
#19 = 0 ADD #18
@push #19
@push 0
@call foo3
@get #20
#21 = 1 MUL #20
#22 = 0 ADD #21
@printf int #22
@push 1111111111
@push 48
@call foo1
@get #23
#24 = 1 MUL #23
#25 = 48 ADD #24
@printf int #25
@call scanf_all
@call no_meanings
@push 1111111111
@push 50
@call foo1
@call print_all
@call init_all_char
@call print_all
k = 0
main_L_2_while_begin :
#26 = 1 MUL k
#27 = 0 ADD #26
#27 = #27 LT 100
@bz #27 main_L_3_while_over
#28 = 1 MUL k
#29 = 100 SUB #28
#29 = #29 SUB 1
#30 = 1 MUL k
#31 = 0 ADD #30
array = #29 ARSET #31
#32 = 1 MUL k
#33 = 0 ADD #32
#33 = #33 ADD 1
k = #33
@j main_L_2_while_begin
main_L_3_while_over :
#34 = 95
array = #34 ARSET -1
main_L_4_while_begin :
#35 = 1 MUL k
#36 = 0 ADD #35
#36 = #36 GT 93
@bz #36 main_L_5_while_over
#37 = 1 MUL k
#38 = 0 ADD #37
#38 = #38 EQ 94
@bz #38 main_L_6_else_begin
@push 48
@call test_switch
@j main_L_7_else_over
main_L_6_else_begin :
#39 = 1 MUL k
#40 = 0 ADD #39
@push #40
@call test_switch
main_L_7_else_over :
#41 = 1 MUL k
#42 = 0 ADD #41
#42 = #42 SUB 1
k = #42
@j main_L_4_while_begin
main_L_5_while_over :
@push 97
@push 0
@call foo5
@get #43
#44 = 1 MUL #43
#45 = 0 ADD #44
@printf int #45
@push 0
@push 0
@call foo5
@get #46
#47 = 1 MUL #46
#48 = 0 ADD #47
@printf int #48
@printf string Fibonacci N: 
@scanf times
i = 0
main_L_8_while_begin :
#49 = 1 MUL i
#50 = 0 ADD #49
#51 = 1 MUL times
#52 = 0 ADD #51
#50 = #50 LT #52
@bz #50 main_L_9_while_over
@call fibonacci
#53 = 1 MUL i
#54 = 0 ADD #53
#54 = #54 ADD 1
i = #54
@j main_L_8_while_begin
main_L_9_while_over :
@printf string Sort N: 
@scanf times
i = 0
main_L_10_while_begin :
#55 = 1 MUL i
#56 = 0 ADD #55
#57 = 1 MUL times
#58 = 0 ADD #57
#56 = #56 LT #58
@bz #56 main_L_11_while_over
@call sort
#59 = 1 MUL i
#60 = 0 ADD #59
#60 = #60 ADD 1
i = #60
@j main_L_10_while_begin
main_L_11_while_over :
@ret
